# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import pumploop_pb2 as pumploop__pb2

GRPC_GENERATED_VERSION = '1.68.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in pumploop_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class PumpControllerStub(object):
    """The greeting service definition.
    Sends a greeting
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SetSystemInfo = channel.unary_unary(
                '/pumploop.PumpController/SetSystemInfo',
                request_serializer=pumploop__pb2.SystemInfo.SerializeToString,
                response_deserializer=pumploop__pb2.SystemInfo.FromString,
                _registered_method=True)
        self.GetSystemInfo = channel.unary_unary(
                '/pumploop.PumpController/GetSystemInfo',
                request_serializer=pumploop__pb2.GetSysInfRequest.SerializeToString,
                response_deserializer=pumploop__pb2.SystemInfo.FromString,
                _registered_method=True)
        self.SetValveStatus = channel.unary_unary(
                '/pumploop.PumpController/SetValveStatus',
                request_serializer=pumploop__pb2.Valves.SerializeToString,
                response_deserializer=pumploop__pb2.Valves.FromString,
                _registered_method=True)
        self.GetValveStatus = channel.unary_unary(
                '/pumploop.PumpController/GetValveStatus',
                request_serializer=pumploop__pb2.GetValveRequest.SerializeToString,
                response_deserializer=pumploop__pb2.Valves.FromString,
                _registered_method=True)
        self.GetSensorReading = channel.unary_unary(
                '/pumploop.PumpController/GetSensorReading',
                request_serializer=pumploop__pb2.GetSensorRequest.SerializeToString,
                response_deserializer=pumploop__pb2.Sensors.FromString,
                _registered_method=True)
        self.GetSensorStream = channel.unary_stream(
                '/pumploop.PumpController/GetSensorStream',
                request_serializer=pumploop__pb2.GetSensorRequest.SerializeToString,
                response_deserializer=pumploop__pb2.Sensors.FromString,
                _registered_method=True)
        self.SetSystemControl = channel.unary_unary(
                '/pumploop.PumpController/SetSystemControl',
                request_serializer=pumploop__pb2.Controls.SerializeToString,
                response_deserializer=pumploop__pb2.Controls.FromString,
                _registered_method=True)
        self.GetSystemControl = channel.unary_unary(
                '/pumploop.PumpController/GetSystemControl',
                request_serializer=pumploop__pb2.GetControlRequest.SerializeToString,
                response_deserializer=pumploop__pb2.Controls.FromString,
                _registered_method=True)


class PumpControllerServicer(object):
    """The greeting service definition.
    Sends a greeting
    """

    def SetSystemInfo(self, request, context):
        """rpc SetSystemInfo (SetSysInfRequest) returns (SetSysInfResult) {}
        rpc GetSystemInfo (GetSysInfRequest) returns (SystemInfo) {}
        rpc SetValveStatus (SetValveRequest) returns (SetValveResult) {}
        rpc GetValveStatus (GetValveRequest) returns (GetValveResult) {}
        rpc GetSensorReading (GetSensorRequest) returns (GetSensorResult) {}
        rpc GetSensorStream (GetSensorRequest) returns (stream GetSensorResult) {}
        rpc SetSystemControl (SetControlRequest) returns (SetControlResult) {}
        rpc GetSystemControl (GetControlRequest) returns (GetControlResult) {}

        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSystemInfo(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetValveStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetValveStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSensorReading(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSensorStream(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetSystemControl(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSystemControl(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_PumpControllerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SetSystemInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.SetSystemInfo,
                    request_deserializer=pumploop__pb2.SystemInfo.FromString,
                    response_serializer=pumploop__pb2.SystemInfo.SerializeToString,
            ),
            'GetSystemInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSystemInfo,
                    request_deserializer=pumploop__pb2.GetSysInfRequest.FromString,
                    response_serializer=pumploop__pb2.SystemInfo.SerializeToString,
            ),
            'SetValveStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.SetValveStatus,
                    request_deserializer=pumploop__pb2.Valves.FromString,
                    response_serializer=pumploop__pb2.Valves.SerializeToString,
            ),
            'GetValveStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.GetValveStatus,
                    request_deserializer=pumploop__pb2.GetValveRequest.FromString,
                    response_serializer=pumploop__pb2.Valves.SerializeToString,
            ),
            'GetSensorReading': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSensorReading,
                    request_deserializer=pumploop__pb2.GetSensorRequest.FromString,
                    response_serializer=pumploop__pb2.Sensors.SerializeToString,
            ),
            'GetSensorStream': grpc.unary_stream_rpc_method_handler(
                    servicer.GetSensorStream,
                    request_deserializer=pumploop__pb2.GetSensorRequest.FromString,
                    response_serializer=pumploop__pb2.Sensors.SerializeToString,
            ),
            'SetSystemControl': grpc.unary_unary_rpc_method_handler(
                    servicer.SetSystemControl,
                    request_deserializer=pumploop__pb2.Controls.FromString,
                    response_serializer=pumploop__pb2.Controls.SerializeToString,
            ),
            'GetSystemControl': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSystemControl,
                    request_deserializer=pumploop__pb2.GetControlRequest.FromString,
                    response_serializer=pumploop__pb2.Controls.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'pumploop.PumpController', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('pumploop.PumpController', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class PumpController(object):
    """The greeting service definition.
    Sends a greeting
    """

    @staticmethod
    def SetSystemInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/pumploop.PumpController/SetSystemInfo',
            pumploop__pb2.SystemInfo.SerializeToString,
            pumploop__pb2.SystemInfo.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetSystemInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/pumploop.PumpController/GetSystemInfo',
            pumploop__pb2.GetSysInfRequest.SerializeToString,
            pumploop__pb2.SystemInfo.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetValveStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/pumploop.PumpController/SetValveStatus',
            pumploop__pb2.Valves.SerializeToString,
            pumploop__pb2.Valves.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetValveStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/pumploop.PumpController/GetValveStatus',
            pumploop__pb2.GetValveRequest.SerializeToString,
            pumploop__pb2.Valves.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetSensorReading(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/pumploop.PumpController/GetSensorReading',
            pumploop__pb2.GetSensorRequest.SerializeToString,
            pumploop__pb2.Sensors.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetSensorStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/pumploop.PumpController/GetSensorStream',
            pumploop__pb2.GetSensorRequest.SerializeToString,
            pumploop__pb2.Sensors.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetSystemControl(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/pumploop.PumpController/SetSystemControl',
            pumploop__pb2.Controls.SerializeToString,
            pumploop__pb2.Controls.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetSystemControl(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/pumploop.PumpController/GetSystemControl',
            pumploop__pb2.GetControlRequest.SerializeToString,
            pumploop__pb2.Controls.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
